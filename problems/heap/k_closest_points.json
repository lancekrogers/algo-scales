{
  "id": "k_closest_points",
  "title": "K Closest Points to Origin",
  "difficulty": "medium",
  "patterns": ["heap"],
  "estimated_time": 20,
  "companies": ["Amazon", "Facebook", "Google", "Microsoft", "LinkedIn"],
  "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).\n\nThe distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)² + (y1 - y2)²).\n\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).",
  "examples": [
    {
      "input": "points = [[1,3],[-2,2]], k = 1",
      "output": "[[-2,2]]",
      "explanation": "The distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]."
    },
    {
      "input": "points = [[3,3],[5,-1],[-2,4]], k = 2",
      "output": "[[3,3],[-2,4]]",
      "explanation": "The answer [[-2,4],[3,3]] would also be accepted."
    }
  ],
  "constraints": [
    "1 <= k <= points.length <= 10^4",
    "-10^4 <= xi, yi <= 10^4"
  ],
  "pattern_explanation": "The heap (also known as priority queue) data structure is ideal for this problem because it allows us to efficiently track the K smallest (or largest) elements from a dataset. In this problem, we use a max heap to maintain the K closest points to the origin, which gives us O(n log k) time complexity for processing all points.",
  "solution_walkthrough": [
    "Calculate the distance of each point from the origin (0, 0) using the Euclidean distance formula: sqrt(x^2 + y^2).",
    "Use a max heap (priority queue) to keep track of the K closest points.",
    "Iterate through all points:",
    "  1. Calculate the distance of the current point from the origin.",
    "  2. If the heap size is less than K, add the point to the heap.",
    "  3. Otherwise, if the distance is smaller than the distance of the point at the top of the heap (the furthest point among the current K closest), remove the top point and add the current point.",
    "After processing all points, the heap contains the K closest points to the origin.",
    "Return the points in the heap.",
    "Time complexity: O(n log k) where n is the number of points and k is the number of closest points we need to find."
  ],
  "starter_code": {
    "go": "func kClosest(points [][]int, k int) [][]int {\n    // Your code here\n    return [][]int{}\n}",
    "python": "def k_closest(points, k):\n    # Your code here\n    return []",
    "java": "public class Solution {\n    public int[][] kClosest(int[][] points, int k) {\n        // Your code here\n        return new int[0][0];\n    }\n}"
  },
  "solutions": {
    "go": "import (\n    \"container/heap\"\n    \"math\"\n)\n\ntype Point struct {\n    coordinates []int\n    distance    float64\n}\n\ntype MaxHeap []Point\n\nfunc (h MaxHeap) Len() int           { return len(h) }\nfunc (h MaxHeap) Less(i, j int) bool { return h[i].distance > h[j].distance } // Max heap\nfunc (h MaxHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\n\nfunc (h *MaxHeap) Push(x interface{}) {\n    *h = append(*h, x.(Point))\n}\n\nfunc (h *MaxHeap) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[0 : n-1]\n    return x\n}\n\nfunc kClosest(points [][]int, k int) [][]int {\n    h := &MaxHeap{}\n    heap.Init(h)\n    \n    for _, point := range points {\n        // Calculate Euclidean distance (we can skip the square root for comparison)\n        distance := float64(point[0]*point[0] + point[1]*point[1])\n        \n        if h.Len() < k {\n            heap.Push(h, Point{coordinates: point, distance: distance})\n        } else if distance < (*h)[0].distance {\n            heap.Pop(h)\n            heap.Push(h, Point{coordinates: point, distance: distance})\n        }\n    }\n    \n    // Extract result from the heap\n    result := make([][]int, h.Len())\n    for i := 0; i < len(result); i++ {\n        result[len(result)-i-1] = heap.Pop(h).(Point).coordinates\n    }\n    \n    return result\n}",
    "python": "import heapq\n\ndef k_closest(points, k):\n    # Use a max heap (inverting distances for a min heap implementation)\n    heap = []\n    \n    for point in points:\n        # Calculate Euclidean distance squared (we can skip the square root for comparison)\n        distance = point[0]**2 + point[1]**2\n        \n        if len(heap) < k:\n            # Use negative distance for max heap with heapq (min heap implementation)\n            heapq.heappush(heap, (-distance, point))\n        elif -distance > heap[0][0]:  # If closer than the furthest in our heap\n            heapq.heappushpop(heap, (-distance, point))\n    \n    # Extract result from the heap\n    return [point for _, point in heap]\n",
    "java": "import java.util.*;\n\npublic class Solution {\n    public int[][] kClosest(int[][] points, int k) {\n        // Use a max heap (will keep track of k closest points)\n        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> \n            (b[0] * b[0] + b[1] * b[1]) - (a[0] * a[0] + a[1] * a[1])\n        );\n        \n        for (int[] point : points) {\n            maxHeap.offer(point);\n            if (maxHeap.size() > k) {\n                maxHeap.poll();\n            }\n        }\n        \n        // Extract result from the heap\n        int[][] result = new int[k][2];\n        int i = 0;\n        while (!maxHeap.isEmpty()) {\n            result[i++] = maxHeap.poll();\n        }\n        \n        return result;\n    }\n}"
  },
  "test_cases": [
    {
      "input": "[[1,3],[-2,2]], 1",
      "expected": "[[-2,2]]"
    },
    {
      "input": "[[3,3],[5,-1],[-2,4]], 2",
      "expected": "[[3,3],[-2,4]]"
    },
    {
      "input": "[[0,1],[1,0]], 2",
      "expected": "[[0,1],[1,0]]"
    },
    {
      "input": "[[1,1],[2,2],[3,3]], 1",
      "expected": "[[1,1]]"
    },
    {
      "input": "[[-5,4],[4,6],[4,7],[2,3]], 3",
      "expected": "[[2,3],[-5,4],[4,6]]"
    }
  ]
}