{
  "id": "number_of_islands",
  "title": "Number of Islands",
  "difficulty": "medium",
  "patterns": ["dfs"],
  "estimated_time": 25,
  "companies": ["Amazon", "Microsoft", "Google", "Facebook", "Apple"],
  "description": "Given an m x n 2D binary grid 'grid' which represents a map of '1's (land) and '0's (water), return the number of islands.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
  "examples": [
    {
      "input": "grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]",
      "output": "1",
      "explanation": "There is only one island (connected group of 1's)."
    },
    {
      "input": "grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]",
      "output": "3",
      "explanation": "There are three islands (connected groups of 1's)."
    }
  ],
  "constraints": [
    "m == grid.length",
    "n == grid[i].length",
    "1 <= m, n <= 300",
    "grid[i][j] is '0' or '1'"
  ],
  "pattern_explanation": "Depth-First Search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root (or an arbitrary node) and explores as far as possible along each branch before backtracking. This makes it ideal for problems like finding connected components, as in this island counting problem, where we need to explore all connected cells of land.",
  "solution_walkthrough": [
    "Iterate through each cell in the grid.",
    "When a '1' (land) is found, increment the island count and perform a DFS to mark all connected land cells as visited (changing them to '0' to avoid re-counting).",
    "During the DFS, explore all four adjacent cells (up, down, left, right) recursively, but only if they are valid cells and contain a '1'.",
    "Continue iterating through the grid until all cells have been processed.",
    "Return the total count of islands found.",
    "Time complexity: O(m*n) where m is the number of rows and n is the number of columns in the grid."
  ],
  "starter_code": {
    "go": "func numIslands(grid [][]byte) int {\n    // Your code here\n    return 0\n}",
    "python": "def num_islands(grid):\n    # Your code here\n    return 0",
    "java": "public class Solution {\n    public int numIslands(char[][] grid) {\n        // Your code here\n        return 0;\n    }\n}"
  },
  "solutions": {
    "go": "func numIslands(grid [][]byte) int {\n    if len(grid) == 0 || len(grid[0]) == 0 {\n        return 0\n    }\n    \n    count := 0\n    rows, cols := len(grid), len(grid[0])\n    \n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            if grid[i][j] == '1' {\n                count++\n                dfs(grid, i, j, rows, cols)\n            }\n        }\n    }\n    \n    return count\n}\n\nfunc dfs(grid [][]byte, i, j, rows, cols int) {\n    // Check bounds and if it's land\n    if i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] != '1' {\n        return\n    }\n    \n    // Mark as visited\n    grid[i][j] = '0'\n    \n    // Explore all four directions\n    dfs(grid, i+1, j, rows, cols) // Down\n    dfs(grid, i-1, j, rows, cols) // Up\n    dfs(grid, i, j+1, rows, cols) // Right\n    dfs(grid, i, j-1, rows, cols) // Left\n}",
    "python": "def num_islands(grid):\n    if not grid or not grid[0]:\n        return 0\n    \n    count = 0\n    rows, cols = len(grid), len(grid[0])\n    \n    def dfs(i, j):\n        # Check bounds and if it's land\n        if i < 0 or i >= rows or j < 0 or j >= cols or grid[i][j] != '1':\n            return\n        \n        # Mark as visited\n        grid[i][j] = '0'\n        \n        # Explore all four directions\n        dfs(i+1, j)  # Down\n        dfs(i-1, j)  # Up\n        dfs(i, j+1)  # Right\n        dfs(i, j-1)  # Left\n    \n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == '1':\n                count += 1\n                dfs(i, j)\n    \n    return count",
    "java": "public class Solution {\n    public int numIslands(char[][] grid) {\n        if (grid == null || grid.length == 0 || grid[0].length == 0) {\n            return 0;\n        }\n        \n        int count = 0;\n        int rows = grid.length;\n        int cols = grid[0].length;\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid[i][j] == '1') {\n                    count++;\n                    dfs(grid, i, j, rows, cols);\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private void dfs(char[][] grid, int i, int j, int rows, int cols) {\n        // Check bounds and if it's land\n        if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] != '1') {\n            return;\n        }\n        \n        // Mark as visited\n        grid[i][j] = '0';\n        \n        // Explore all four directions\n        dfs(grid, i + 1, j, rows, cols);  // Down\n        dfs(grid, i - 1, j, rows, cols);  // Up\n        dfs(grid, i, j + 1, rows, cols);  // Right\n        dfs(grid, i, j - 1, rows, cols);  // Left\n    }\n}"
  },
  "test_cases": [
    {
      "input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
      "expected": "1"
    },
    {
      "input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]",
      "expected": "3"
    },
    {
      "input": "[[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\"]]",
      "expected": "10"
    },
    {
      "input": "[[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
      "expected": "0"
    },
    {
      "input": "[[\"1\"]]",
      "expected": "1"
    }
  ]
}