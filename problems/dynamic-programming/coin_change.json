{
  "id": "coin_change",
  "title": "Coin Change",
  "difficulty": "medium",
  "patterns": ["dynamic-programming"],
  "estimated_time": 30,
  "companies": ["Amazon", "Microsoft", "Google", "Facebook", "Apple"],
  "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\nYou may assume that you have an infinite number of each kind of coin.",
  "examples": [
    {
      "input": "coins = [1,2,5], amount = 11",
      "output": "3",
      "explanation": "11 = 5 + 5 + 1"
    },
    {
      "input": "coins = [2], amount = 3",
      "output": "-1",
      "explanation": "3 cannot be made up with only 2-valued coins."
    },
    {
      "input": "coins = [1], amount = 0",
      "output": "0",
      "explanation": "0 coins are needed to make amount 0."
    }
  ],
  "constraints": [
    "1 <= coins.length <= 12",
    "1 <= coins[i] <= 2^31 - 1",
    "0 <= amount <= 10^4"
  ],
  "pattern_explanation": "Dynamic Programming is a method for solving complex problems by breaking them down into simpler subproblems. It is applicable when the subproblems overlap and have optimal substructure. In this problem, we can break down the problem of finding the minimum number of coins to make a certain amount into subproblems of finding the minimum number of coins for smaller amounts.",
  "solution_walkthrough": [
    "Create a DP array of size amount+1, initialized with amount+1 as a large value that's greater than any possible answer (since we want the minimum).",
    "Set dp[0] = 0 because no coins are needed to make amount 0.",
    "For each amount i from 1 to amount:",
    "  1. For each coin denomination:",
    "     a. If the coin value is less than or equal to the current amount i:",
    "        i. Update dp[i] = min(dp[i], dp[i-coin] + 1).",
    "Return dp[amount] if it's less than amount+1, otherwise return -1 (meaning it's not possible).",
    "Time complexity: O(amount * coins.length) - we check each coin for each amount.",
    "Space complexity: O(amount) - we store the minimum coins needed for each amount up to the target."
  ],
  "starter_code": {
    "go": "func coinChange(coins []int, amount int) int {\n    // Your code here\n    return 0\n}",
    "python": "def coin_change(coins, amount):\n    # Your code here\n    return 0",
    "java": "public class Solution {\n    public int coinChange(int[] coins, int amount) {\n        // Your code here\n        return 0;\n    }\n}"
  },
  "solutions": {
    "go": "func coinChange(coins []int, amount int) int {\n    // Initialize dp array with amount+1 as maximum value\n    dp := make([]int, amount+1)\n    for i := range dp {\n        dp[i] = amount + 1\n    }\n    \n    // Base case: 0 coins needed to make amount 0\n    dp[0] = 0\n    \n    // For each amount, find the minimum coins needed\n    for i := 1; i <= amount; i++ {\n        for _, coin := range coins {\n            if coin <= i {\n                dp[i] = min(dp[i], dp[i-coin] + 1)\n            }\n        }\n    }\n    \n    // If dp[amount] is still amount+1, it means we can't make the amount\n    if dp[amount] > amount {\n        return -1\n    }\n    \n    return dp[amount]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}",
    "python": "def coin_change(coins, amount):\n    # Initialize dp array with amount+1 as maximum value\n    dp = [amount + 1] * (amount + 1)\n    \n    # Base case: 0 coins needed to make amount 0\n    dp[0] = 0\n    \n    # For each amount, find the minimum coins needed\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    # If dp[amount] is still amount+1, it means we can't make the amount\n    return dp[amount] if dp[amount] <= amount else -1",
    "java": "public class Solution {\n    public int coinChange(int[] coins, int amount) {\n        // Initialize dp array with amount+1 as maximum value\n        int[] dp = new int[amount + 1];\n        Arrays.fill(dp, amount + 1);\n        \n        // Base case: 0 coins needed to make amount 0\n        dp[0] = 0;\n        \n        // For each amount, find the minimum coins needed\n        for (int i = 1; i <= amount; i++) {\n            for (int coin : coins) {\n                if (coin <= i) {\n                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n                }\n            }\n        }\n        \n        // If dp[amount] is still amount+1, it means we can't make the amount\n        return dp[amount] > amount ? -1 : dp[amount];\n    }\n}"
  },
  "test_cases": [
    {
      "input": "[1,2,5], 11",
      "expected": "3"
    },
    {
      "input": "[2], 3",
      "expected": "-1"
    },
    {
      "input": "[1], 0",
      "expected": "0"
    },
    {
      "input": "[1,3,4,5], 7",
      "expected": "2"
    },
    {
      "input": "[2,5,10,1], 27",
      "expected": "4"
    },
    {
      "input": "[186,419,83,408], 6249",
      "expected": "20"
    }
  ]
}