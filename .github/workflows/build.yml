# GitHub Actions CI/CD workflow
# .github/workflows/build.yml
name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
        id: go

      - name: Check out code
        uses: actions/checkout@v4

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
        id: go

      - name: Check out code
        uses: actions/checkout@v4

      - name: Get dependencies
        run: go mod download

      - name: Build
        run: make build

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            algo-scales
            algo-scales-server

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Get dependencies
        run: go mod download

      - name: Build all platforms
        run: make build-all

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./algo-scales-linux-amd64
          asset_name: algo-scales-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Windows binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./algo-scales-windows-amd64.exe
          asset_name: algo-scales-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS Intel binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./algo-scales-darwin-amd64
          asset_name: algo-scales-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS ARM binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./algo-scales-darwin-arm64
          asset_name: algo-scales-darwin-arm64
          asset_content_type: application/octet-stream

      - name: Upload Server binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./algo-scales-server-linux-amd64
          asset_name: algo-scales-server-linux-amd64
          asset_content_type: application/octet-stream
